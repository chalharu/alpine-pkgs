name: Deploy to Pages

on:
  schedule:
    - cron:  '0 17 * * *'
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    strategy:
      matrix:
        include:
          - arch: amd64
            apk-arch: x86_64
          - arch: arm64/v8
            apk-arch: aarch64
    environment: Alpine packages
    runs-on: ubuntu-latest
    steps:
      - name: IDの生成
        id: build-id
        run: echo "id=$(date +%s)" >> $GITHUB_OUTPUT
      - name: REPOSITORY_NAMEの取得
        run: echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_ENV
      - uses: actions/cache@v4.0.2
        with:
          path: ./packages
          key: packages-${{ matrix.apk-arch }}-${{ steps.build-id.outputs.id }}
          restore-keys: |
            packages-${{ matrix.apk-arch }}-
            packages-
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          path: src
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.1.0
      - name: Key
        env:
          PACKAGER_PRIVKEY: ${{ secrets.PACKAGER_PRIVKEY }}
          PACKAGER_PUBKEY: ${{ vars.PACKAGER_PUBKEY }}
        run: |
          echo $PACKAGER_PRIVKEY | base64 -d > ./${{ vars.PACKAGER_KEYFILENAME }}
          echo $PACKAGER_PUBKEY | base64 -d > ./${{ vars.PACKAGER_KEYFILENAME }}.pub
      - name: Build package
        env:
          PACKAGER_PRIVKEY: ${{ secrets.PACKAGER_PRIVKEY }}
          PACKAGER_PUBKEY: ${{ vars.PACKAGER_PUBKEY }}
          # renovate: datasource=docker depName=alpine
          DOCKER_ALPINE_VERSION: "3.20"
        run: |
          docker run --platform linux/${{ matrix.arch }} --rm -i -v $PWD/src:/${{ env.REPOSITORY_NAME }}/src -v $PWD/packages:/${{ env.REPOSITORY_NAME }}/packages alpine:${{ env.DOCKER_ALPINE_VERSION }} sh <<'EOF'
          apk add alpine-sdk
          ABUILD_CONF="/etc/abuild.conf"
          if [ `grep -E "^PACKAGER=" $ABUILD_CONF | wc -l` == "0" ]; then echo 'PACKAGER="${{ vars.PACKAGER }}"' >> $ABUILD_CONF; fi
          if [ `grep -E "^MAINTAINER=" $ABUILD_CONF | wc -l` == "0" ]; then echo 'MAINTAINER="${{ vars.MAINTAINER }}"' >> $ABUILD_CONF; fi
          cp /${{ env.REPOSITORY_NAME }}/${{ vars.PACKAGER_KEYFILENAME }}.pub /etc/apk/keys/
          if [ `grep -E "^PACKAGER_PRIVKEY=" $ABUILD_CONF | wc -l` == "0" ]; then echo 'PACKAGER_PRIVKEY=/${{ env.REPOSITORY_NAME }}/${{ vars.PACKAGER_KEYFILENAME }}' >> $ABUILD_CONF; fi
          DESTDIR=/${{ env.REPOSITORY_NAME }}/packages
          if [ `grep -E "^REPODEST=" $ABUILD_CONF | wc -l` == "0" ]; then echo "REPODEST=$DESTDIR" >> $ABUILD_CONF; fi
          mkdir -p $DESTDIR
          cd /${{ env.REPOSITORY_NAME }}/src
          abuild -r -F
          EOF
      - name: Remove other packages
        run: |
          find packages/${{ env.REPOSITORY_NAME }} -maxdepth 1 -mindepth 1 ! -name '${{ matrix.apk-arch }}' | xargs rm -rf
      - name: Archive artifacts
        uses: actions/upload-artifact@v4.3.4
        with:
          name: dist-${{ matrix.apk-arch }}
          retention-days: 1
          path: |
            packages/${{ env.REPOSITORY_NAME }}
          overwrite: true
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: dist-*
          merge-multiple: true
      - name: Setup Pages
        uses: actions/configure-pages@v5.0.0
      - run: echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5
