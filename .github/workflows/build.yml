name: Build alpine packages
on:
  workflow_call:
    inputs:
      apkbuild-files:
        type: string
        required: true
      repository-name:
        type: string
        required: true
      apk-arch:
        type: string
        required: true
      arch:
        type: string
        required: true
jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        apkbuild-files: ${{ fromJson(inputs.apkbuild-files) }}
    environment: Alpine packages
    runs-on: ubuntu-latest
    timeout-minutes: 720
    steps:
      - name: IDの生成
        id: build-id
        run: echo "id=$(date +%s)" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          path: src
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
      - name: Key
        env:
          PACKAGER_PRIVKEY: ${{ secrets.PACKAGER_PRIVKEY }}
          PACKAGER_PUBKEY: ${{ vars.PACKAGER_PUBKEY }}
        run: |
          mkdir ./keys
          echo $PACKAGER_PRIVKEY | base64 -d > ./keys/${{ vars.PACKAGER_KEYFILENAME }}
          echo $PACKAGER_PUBKEY | base64 -d > ./keys/${{ vars.PACKAGER_KEYFILENAME }}.pub
      - uses: actions/cache@v4.1.0
        with:
          path: ./packages
          key: packages-${{ inputs.apk-arch }}-${{ steps.build-id.outputs.id }}
          restore-keys: |
            packages-${{ inputs.apk-arch }}-
            packages-
      - name: Build package
        env:
          PACKAGER_PRIVKEY: ${{ secrets.PACKAGER_PRIVKEY }}
          PACKAGER_PUBKEY: ${{ vars.PACKAGER_PUBKEY }}
          # renovate: datasource=docker depName=alpine
          DOCKER_ALPINE_VERSION: "3.20"
        run: |
          docker run --platform linux/${{ inputs.arch }} --rm -i -v $(dirname ${{ matrix.apkbuild-files }}):/${{ inputs.repository-name }}/src -v $PWD/keys:/${{ inputs.repository-name }}/keys -v $PWD/packages:/${{ inputs.repository-name }}/packages alpine:${{ env.DOCKER_ALPINE_VERSION }} sh <<'EOF'
          apk add alpine-sdk
          ABUILD_CONF="/etc/abuild.conf"
          if [ `grep -E "^PACKAGER=" $ABUILD_CONF | wc -l` == "0" ]; then echo 'PACKAGER="${{ vars.PACKAGER }}"' >> $ABUILD_CONF; fi
          if [ `grep -E "^MAINTAINER=" $ABUILD_CONF | wc -l` == "0" ]; then echo 'MAINTAINER="${{ vars.MAINTAINER }}"' >> $ABUILD_CONF; fi
          cp /${{ inputs.repository-name }}/keys/${{ vars.PACKAGER_KEYFILENAME }}.pub /etc/apk/keys/
          if [ `grep -E "^PACKAGER_PRIVKEY=" $ABUILD_CONF | wc -l` == "0" ]; then echo 'PACKAGER_PRIVKEY=/${{ inputs.repository-name }}/keys/${{ vars.PACKAGER_KEYFILENAME }}' >> $ABUILD_CONF; fi
          DESTDIR=/${{ inputs.repository-name }}/packages
          if [ `grep -E "^REPODEST=" $ABUILD_CONF | wc -l` == "0" ]; then echo "REPODEST=$DESTDIR" >> $ABUILD_CONF; fi
          mkdir -p $DESTDIR
          cd /${{ inputs.repository-name }}/src
          abuild -r -F
          EOF
      - name: Remove other packages
        run: |
          find packages/${{ inputs.repository-name }} -maxdepth 1 -mindepth 1 ! -name '${{ inputs.apk-arch }}' | xargs rm -rf
